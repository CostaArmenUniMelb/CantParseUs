   call main
   halt
main:
# prologue
   push_stack_frame 2
# parameters
# declerations
   int_const r0, 0
   store 0, r0
   int_const r0, 0
   store 1, r0
# statements
# assign
   int_const r0, 3
   store 0, r0
# assign
   int_const r0, 2
   store 1, r0
# InvokeProc
   load_address r0, 0
   load_address r1, 1
   call test_ref
# InvokeProc
   int_const r0, 4
   load r1, 1
   call assert_int
# InvokeProc
   int_const r0, 12
   load r1, 0
   call assert_int
# InvokeProc
   int_const r0, 2
   real_const r1, 3.50
   int_const r2, 1
   call simple_decleration
# InvokeProc
   call array_process
# InvokeProc
   call math_operation
# InvokeProc
   call logic_operation
# InvokeProc
   call if_else
# InvokeProc
   call do_while
# InvokeProc
   call read_inputs
# epilogue
   pop_stack_frame 2
   return
test_ref:
# prologue
   push_stack_frame 2
# parameters
   store 0, r0
   store 1, r1
# declerations
# statements
# assign
   load r0, 1
   load_indirect r0, r0
   int_const r1, 2
   mul_int r0, r0, r1
   load r1, 1
   store_indirect r1, r0
# assign
   load r0, 0
   load_indirect r0, r0
   load r1, 1
   load_indirect r1, r1
   mul_int r0, r0, r1
   load r1, 0
   store_indirect r1, r0
# epilogue
   pop_stack_frame 2
   return
assert_int:
# prologue
   push_stack_frame 2
# parameters
   store 0, r0
   store 1, r1
# declerations
# statements
# write
   string_const r0, "The expecting value is:"
   call_builtin print_string
# write
   load r0, 0
   call_builtin print_int
# write
   string_const r0, " , Result:"
   call_builtin print_string
# write
   load r0, 1
   call_builtin print_int
# write
   string_const r0, "\n"
   call_builtin print_string
# epilogue
   pop_stack_frame 2
   return
assert_bool:
# prologue
   push_stack_frame 2
# parameters
   store 0, r0
   store 1, r1
# declerations
# statements
# write
   string_const r0, "The expecting value is:"
   call_builtin print_string
# write
   load r0, 0
   call_builtin print_bool
# write
   string_const r0, " , Result:"
   call_builtin print_string
# write
   load r0, 1
   call_builtin print_bool
# write
   string_const r0, "\n"
   call_builtin print_string
# epilogue
   pop_stack_frame 2
   return
assert_float:
# prologue
   push_stack_frame 2
# parameters
   store 0, r0
   store 1, r1
# declerations
# statements
# write
   string_const r0, "The expecting value is:"
   call_builtin print_string
# write
   load r0, 0
   call_builtin print_real
# write
   string_const r0, " , Result:"
   call_builtin print_string
# write
   load r0, 1
   call_builtin print_real
# write
   string_const r0, "\n"
   call_builtin print_string
# epilogue
   pop_stack_frame 2
   return
simple_decleration:
# prologue
   push_stack_frame 6
# parameters
   store 0, r0
   store 1, r1
   store 2, r2
# declerations
   int_const r0, 0
   store 3, r0
   real_const r0, 0.00
   store 4, r0
   int_const r0, 0
   store 5, r0
# statements
# assign
   load r0, 0
   store 3, r0
# InvokeProc
   load r0, 0
   load r1, 3
   call assert_int
# assign
   load r0, 1
   store 4, r0
# InvokeProc
   load r0, 1
   load r1, 4
   call assert_float
# assign
   load r0, 2
   store 5, r0
# InvokeProc
   load r0, 2
   load r1, 5
   call assert_bool
# assign
   int_const r0, 20
   int_to_real r0, r0
   store 4, r0
# InvokeProc
   real_const r0, 20.00
   load r1, 4
   call assert_float
# epilogue
   pop_stack_frame 6
   return
array_process:
# prologue
   push_stack_frame 172
# parameters
# declerations
   int_const r0, 0
   store 0, r0
   int_const r0, 0
   store 1, r0
   int_const r0, 0
   store 2, r0
   int_const r0, 0
   store 3, r0
   int_const r0, 0
   store 4, r0
   int_const r0, 0
   store 5, r0
   int_const r0, 0
   store 6, r0
   int_const r0, 0
   store 7, r0
   int_const r0, 0
   store 8, r0
   int_const r0, 0
   store 9, r0
   int_const r0, 0
   store 10, r0
   int_const r0, 0
   store 11, r0
   int_const r0, 0
   store 12, r0
   int_const r0, 0
   store 13, r0
   int_const r0, 0
   store 14, r0
   int_const r0, 0
   store 15, r0
   int_const r0, 0
   store 16, r0
   int_const r0, 0
   store 17, r0
   int_const r0, 0
   store 18, r0
   int_const r0, 0
   store 19, r0
   int_const r0, 0
   store 20, r0
   int_const r0, 0
   store 21, r0
   int_const r0, 0
   store 22, r0
   int_const r0, 0
   store 23, r0
   int_const r0, 0
   store 24, r0
   int_const r0, 0
   store 25, r0
   int_const r0, 0
   store 26, r0
   int_const r0, 0
   store 27, r0
   int_const r0, 0
   store 28, r0
   int_const r0, 0
   store 29, r0
   int_const r0, 0
   store 30, r0
   int_const r0, 0
   store 31, r0
   int_const r0, 0
   store 32, r0
   int_const r0, 0
   store 33, r0
   int_const r0, 0
   store 34, r0
   int_const r0, 0
   store 35, r0
   int_const r0, 0
   store 36, r0
   int_const r0, 0
   store 37, r0
   int_const r0, 0
   store 38, r0
   int_const r0, 0
   store 39, r0
   int_const r0, 0
   store 40, r0
   int_const r0, 0
   store 41, r0
   int_const r0, 0
   store 42, r0
   int_const r0, 0
   store 43, r0
   int_const r0, 0
   store 44, r0
   int_const r0, 0
   store 45, r0
   int_const r0, 0
   store 46, r0
   int_const r0, 0
   store 47, r0
   int_const r0, 0
   store 48, r0
   int_const r0, 0
   store 49, r0
   int_const r0, 0
   store 50, r0
   int_const r0, 0
   store 51, r0
   int_const r0, 0
   store 52, r0
   int_const r0, 0
   store 53, r0
   int_const r0, 0
   store 54, r0
   int_const r0, 0
   store 55, r0
   int_const r0, 0
   store 56, r0
   int_const r0, 0
   store 57, r0
   int_const r0, 0
   store 58, r0
   int_const r0, 0
   store 59, r0
   int_const r0, 0
   store 60, r0
   int_const r0, 0
   store 61, r0
   int_const r0, 0
   store 62, r0
   int_const r0, 0
   store 63, r0
   int_const r0, 0
   store 64, r0
   int_const r0, 0
   store 65, r0
   int_const r0, 0
   store 66, r0
   int_const r0, 0
   store 67, r0
   int_const r0, 0
   store 68, r0
   int_const r0, 0
   store 69, r0
   int_const r0, 0
   store 70, r0
   int_const r0, 0
   store 71, r0
   int_const r0, 0
   store 72, r0
   int_const r0, 0
   store 73, r0
   int_const r0, 0
   store 74, r0
   int_const r0, 0
   store 75, r0
   int_const r0, 0
   store 76, r0
   int_const r0, 0
   store 77, r0
   int_const r0, 0
   store 78, r0
   int_const r0, 0
   store 79, r0
   int_const r0, 0
   store 80, r0
   int_const r0, 0
   store 81, r0
   int_const r0, 0
   store 82, r0
   int_const r0, 0
   store 83, r0
   int_const r0, 0
   store 84, r0
   int_const r0, 0
   store 85, r0
   int_const r0, 0
   store 86, r0
   int_const r0, 0
   store 87, r0
   int_const r0, 0
   store 88, r0
   int_const r0, 0
   store 89, r0
   int_const r0, 0
   store 90, r0
   int_const r0, 0
   store 91, r0
   int_const r0, 0
   store 92, r0
   int_const r0, 0
   store 93, r0
   int_const r0, 0
   store 94, r0
   int_const r0, 0
   store 95, r0
   int_const r0, 0
   store 96, r0
   int_const r0, 0
   store 97, r0
   int_const r0, 0
   store 98, r0
   int_const r0, 0
   store 99, r0
   int_const r0, 0
   store 100, r0
   int_const r0, 0
   store 101, r0
   int_const r0, 0
   store 102, r0
   int_const r0, 0
   store 103, r0
   int_const r0, 0
   store 104, r0
   int_const r0, 0
   store 105, r0
   int_const r0, 0
   store 106, r0
   int_const r0, 0
   store 107, r0
   int_const r0, 0
   store 108, r0
   int_const r0, 0
   store 109, r0
   int_const r0, 0
   store 110, r0
   int_const r0, 0
   store 111, r0
   int_const r0, 0
   store 112, r0
   int_const r0, 0
   store 113, r0
   int_const r0, 0
   store 114, r0
   int_const r0, 0
   store 115, r0
   int_const r0, 0
   store 116, r0
   int_const r0, 0
   store 117, r0
   int_const r0, 0
   store 118, r0
   int_const r0, 0
   store 119, r0
   int_const r0, 0
   store 120, r0
   int_const r0, 0
   store 121, r0
   int_const r0, 0
   store 122, r0
   int_const r0, 0
   store 123, r0
   int_const r0, 0
   store 124, r0
   int_const r0, 0
   store 125, r0
   int_const r0, 0
   store 126, r0
   int_const r0, 0
   store 127, r0
   int_const r0, 0
   store 128, r0
   int_const r0, 0
   store 129, r0
   int_const r0, 0
   store 130, r0
   int_const r0, 0
   store 131, r0
   int_const r0, 0
   store 132, r0
   int_const r0, 0
   store 133, r0
   int_const r0, 0
   store 134, r0
   int_const r0, 0
   store 135, r0
   int_const r0, 0
   store 136, r0
   int_const r0, 0
   store 137, r0
   int_const r0, 0
   store 138, r0
   int_const r0, 0
   store 139, r0
   int_const r0, 0
   store 140, r0
   int_const r0, 0
   store 141, r0
   int_const r0, 0
   store 142, r0
   int_const r0, 0
   store 143, r0
   int_const r0, 0
   store 144, r0
   int_const r0, 0
   store 145, r0
   int_const r0, 0
   store 146, r0
   int_const r0, 0
   store 147, r0
   int_const r0, 0
   store 148, r0
   int_const r0, 0
   store 149, r0
   int_const r0, 0
   store 150, r0
   int_const r0, 0
   store 151, r0
   int_const r0, 0
   store 152, r0
   int_const r0, 0
   store 153, r0
   int_const r0, 0
   store 154, r0
   int_const r0, 0
   store 155, r0
   int_const r0, 0
   store 156, r0
   int_const r0, 0
   store 157, r0
   int_const r0, 0
   store 158, r0
   int_const r0, 0
   store 159, r0
   int_const r0, 0
   store 160, r0
   int_const r0, 0
   store 161, r0
   int_const r0, 0
   store 162, r0
   int_const r0, 0
   store 163, r0
   int_const r0, 0
   store 164, r0
   int_const r0, 0
   store 165, r0
   int_const r0, 0
   store 166, r0
   int_const r0, 0
   store 167, r0
   int_const r0, 0
   store 168, r0
   int_const r0, 0
   store 169, r0
   int_const r0, 0
   store 170, r0
   int_const r0, 0
   store 171, r0
# statements
# assign
   int_const r0, 20
   int_const r1, 2
   int_const r2, 1
   sub_int r1, r1, r2
   int_const r2, 1
   mul_int r1, r1, r2
   load_address r3, 0
   sub_offset r3, r3, r1
   store_indirect r3, r0
# assign
   int_const r0, 30
   int_const r1, 0
   int_const r2, 0
   sub_int r1, r1, r2
   int_const r2, 30
   mul_int r1, r1, r2
   int_const r2, 3
   int_const r3, 2
   sub_int r2, r2, r3
   int_const r3, 6
   mul_int r2, r2, r3
   add_int r1, r1, r2
   int_const r2, 4
   int_const r3, 3
   sub_int r2, r2, r3
   int_const r3, 1
   mul_int r2, r2, r3
   add_int r1, r1, r2
   load_address r3, 21
   sub_offset r3, r3, r1
   store_indirect r3, r0
# assign
   int_const r0, 0
   int_const r1, 0
   sub_int r0, r0, r1
   int_const r1, 30
   mul_int r0, r0, r1
   int_const r1, 3
   int_const r2, 2
   sub_int r1, r1, r2
   int_const r2, 6
   mul_int r1, r1, r2
   add_int r0, r0, r1
   int_const r1, 5
   int_const r2, 3
   sub_int r1, r1, r2
   int_const r2, 1
   mul_int r1, r1, r2
   add_int r0, r0, r1
   load_address r1, 21
   sub_offset r1, r1, r0
   load_indirect r0, r1
   int_const r1, 3
   int_const r2, 1
   sub_int r1, r1, r2
   int_const r2, 1
   mul_int r1, r1, r2
   load_address r3, 0
   sub_offset r3, r3, r1
   store_indirect r3, r0
# InvokeProc
   int_const r0, 0
   int_const r1, 3
   int_const r2, 1
   sub_int r1, r1, r2
   int_const r2, 1
   mul_int r1, r1, r2
   load_address r2, 0
   sub_offset r2, r2, r1
   load_indirect r1, r2
   call assert_int
# assign
   int_const r0, 0
   int_const r1, 0
   sub_int r0, r0, r1
   int_const r1, 30
   mul_int r0, r0, r1
   int_const r1, 3
   int_const r2, 2
   sub_int r1, r1, r2
   int_const r2, 6
   mul_int r1, r1, r2
   add_int r0, r0, r1
   int_const r1, 4
   int_const r2, 3
   sub_int r1, r1, r2
   int_const r2, 1
   mul_int r1, r1, r2
   add_int r0, r0, r1
   load_address r1, 21
   sub_offset r1, r1, r0
   load_indirect r0, r1
   int_const r1, 4
   int_const r2, 1
   sub_int r1, r1, r2
   int_const r2, 1
   mul_int r1, r1, r2
   load_address r3, 0
   sub_offset r3, r3, r1
   store_indirect r3, r0
# InvokeProc
   int_const r0, 30
   int_const r1, 4
   int_const r2, 1
   sub_int r1, r1, r2
   int_const r2, 1
   mul_int r1, r1, r2
   load_address r2, 0
   sub_offset r2, r2, r1
   load_indirect r1, r2
   call assert_int
# epilogue
   pop_stack_frame 172
   return
math_operation:
# prologue
   push_stack_frame 0
# parameters
# declerations
# statements
# InvokeProc
   int_const r0, 3
   int_const r1, 4
   add_int r0, r0, r1
   int_const r1, 7
   call assert_int
# InvokeProc
   int_const r0, 3
   int_const r1, 4
   sub_int r0, r0, r1
   int_const r1, -1
   call assert_int
# InvokeProc
   int_const r0, 3
   int_const r1, 4
   sub_int r0, r0, r1
   int_const r1, -1
   mul_int r0, r0, r1
   int_const r1, 1
   call assert_int
# InvokeProc
   int_const r0, 3
   int_const r1, 4
   mul_int r0, r0, r1
   int_const r1, 12
   call assert_int
# InvokeProc
   int_const r0, 3
   int_const r1, 4
   div_int r0, r0, r1
   int_const r1, 0
   call assert_int
# InvokeProc
   real_const r0, 3.00
   real_const r1, 4.00
   div_real r0, r0, r1
   real_const r1, 0.75
   call assert_float
# InvokeProc
   real_const r0, 3.00
   int_const r1, 4
   int_to_real r1, r1
   div_real r0, r0, r1
   real_const r1, 0.75
   call assert_float
# InvokeProc
   int_const r0, 3
   real_const r1, 4.00
   int_to_real r0, r0
   div_real r0, r0, r1
   real_const r1, 0.75
   call assert_float
# InvokeProc
   int_const r0, 3
   int_const r1, 4
   int_const r2, 2
   mul_int r1, r1, r2
   add_int r0, r0, r1
   int_const r1, 11
   call assert_int
# InvokeProc
   int_const r0, 3
   int_const r1, 4
   int_const r2, 2
   mul_int r1, r1, r2
   sub_int r0, r0, r1
   int_const r1, -5
   call assert_int
# epilogue
   pop_stack_frame 0
   return
logic_operation:
# prologue
   push_stack_frame 1
# parameters
# declerations
   int_const r0, 0
   store 0, r0
# statements
# InvokeProc
   int_const r0, 0
   load r1, 0
   call assert_bool
# InvokeProc
   int_const r0, 1
   int_const r1, 1
   int_const r2, 1
   and r1, r1, r2
   call assert_bool
# InvokeProc
   int_const r0, 0
   int_const r1, 1
   int_const r2, 0
   and r1, r1, r2
   call assert_bool
# InvokeProc
   int_const r0, 1
   int_const r1, 1
   int_const r2, 0
   int_const r3, 1
   and r2, r2, r3
   or r1, r1, r2
   call assert_bool
# epilogue
   pop_stack_frame 1
   return
if_else:
# prologue
   push_stack_frame 2
# parameters
# declerations
   int_const r0, 0
   store 0, r0
   int_const r0, 0
   store 1, r0
# statements
# assign
   int_const r0, 20
   store 1, r0
# ifThenElse
   load r0, 0
   int_const r1, 0
   cmp_eq_int r0, r0, r1
   load r1, 1
   int_const r2, 20
   cmp_eq_int r1, r1, r2
   and r0, r0, r1
   branch_on_false r0, else1
# assign
   int_const r0, 10
   store 0, r0
# ifThenElse
   load r0, 0
   int_const r1, 5
   cmp_lt_int r0, r0, r1
   branch_on_false r0, else3
# assign
   int_const r0, 20
   store 0, r0
   branch_uncond after4
else3:
# assign
   int_const r0, 50
   store 0, r0
# ifThenElse
   load r0, 0
   int_const r1, 30
   cmp_lt_int r0, r0, r1
   branch_on_false r0, else5
# assign
   int_const r0, 40
   store 0, r0
   branch_uncond after6
else5:
# assign
   int_const r0, 555
   store 0, r0
# write
   string_const r0, "Correct IF-ELSE\nn"
   call_builtin print_string
after6:
after4:
   branch_uncond after2
else1:
# assign
   int_const r0, 20
   store 0, r0
after2:
# InvokeProc
   int_const r0, 555
   load r1, 0
   call assert_int
# epilogue
   pop_stack_frame 2
   return
do_while:
# prologue
   push_stack_frame 2
# parameters
# declerations
   int_const r0, 0
   store 0, r0
   int_const r0, 0
   store 1, r0
# statements
# assign
   int_const r0, 0
   store 0, r0
# assign
   int_const r0, 1
   store 1, r0
# whileDo
begin10:
   load r0, 0
   int_const r1, 5
   cmp_lt_int r0, r0, r1
   branch_on_false r0, after7
# assign
   load r0, 0
   int_const r1, 1
   add_int r0, r0, r1
   store 0, r0
# whileDo
begin9:
   load r0, 1
   int_const r1, 5
   cmp_lt_int r0, r0, r1
   branch_on_false r0, after8
# assign
   load r0, 1
   int_const r1, 1
   add_int r0, r0, r1
   store 1, r0
   branch_uncond begin9
after8:
# assign
   int_const r0, 0
   store 1, r0
   branch_uncond begin10
after7:
# InvokeProc
   int_const r0, 5
   load r1, 0
   call assert_int
# InvokeProc
   int_const r0, 0
   load r1, 1
   call assert_int
# epilogue
   pop_stack_frame 2
   return
read_inputs:
# prologue
   push_stack_frame 3
# parameters
# declerations
   int_const r0, 0
   store 0, r0
   int_const r0, 0
   store 1, r0
   int_const r0, 0
   store 2, r0
# statements
# write
   string_const r0, "Input two positive integers to be added up: "
   call_builtin print_string
# read
   call_builtin read_int
   store 0, r0
# read
   call_builtin read_int
   store 1, r0
# write
   string_const r0, "\n"
   call_builtin print_string
# assign
   load r0, 0
   load r1, 1
   add_int r0, r0, r1
   store 2, r0
# write
   string_const r0, "The result is: "
   call_builtin print_string
# write
   load r0, 2
   call_builtin print_int
# write
   string_const r0, "\n"
   call_builtin print_string
# epilogue
   pop_stack_frame 3
   return
write_bool:
# prologue
   push_stack_frame 1
# parameters
   store 0, r0
# declerations
# statements
# ifThenElse
   load r0, 0
   int_const r1, 1
   cmp_eq_int r0, r0, r1
   branch_on_false r0, else11
# write
   string_const r0, "TRUE"
   call_builtin print_string
   branch_uncond after12
else11:
# write
   string_const r0, "FALSE"
   call_builtin print_string
after12:
# epilogue
   pop_stack_frame 1
   return
