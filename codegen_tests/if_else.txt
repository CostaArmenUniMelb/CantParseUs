   call main
   halt
main:
# prologue
   push_stack_frame 0
# parameters
# declerations
# statements
# InvokeProc
   call if_else
# epilogue
   pop_stack_frame 0
   return
if_else:
# prologue
   push_stack_frame 2
# parameters
# declerations
   int_const r0, 0
   store 0, r0
   int_const r0, 0
   store 1, r0
# statements
# assign
   int_const r0, 20
   store 1, r0
# ifThenElse
   load r0, 0
   int_const r1, 0
   cmp_eq_int r0, r0, r1
   load r1, 1
   int_const r2, 20
   cmp_eq_int r1, r1, r2
   and r0, r0, r1
   branch_on_false r0, else7
# assign
   int_const r0, 10
   store 0, r0
# ifThenElse
   load r0, 0
   int_const r1, 5
   cmp_lt_int r0, r0, r1
   branch_on_false r0, else9
# assign
   int_const r0, 20
   store 0, r0
   branch_uncond after10
else9:
# assign
   int_const r0, 50
   store 0, r0
# ifThenElse
   load r0, 0
   int_const r1, 30
   cmp_lt_int r0, r0, r1
   branch_on_false r0, else11
# assign
   int_const r0, 40
   store 0, r0
   branch_uncond after12
else11:
# assign
   int_const r0, 555
   store 0, r0
# write
   string_const r0, "Correct IF-ELSE\nn"
   call_builtin print_string
after12:
after10:
   branch_uncond after8
else7:
# assign
   int_const r0, 20
   store 0, r0
after8:
# InvokeProc
   int_const r0, 555
   load r1, 0
   call assert_int
# epilogue
   pop_stack_frame 2
   return
assert_int:
# prologue
   push_stack_frame 2
# parameters
   store 0, r0
   store 1, r1
# declerations
# statements
# write
   string_const r0, "The expecting value is:"
   call_builtin print_string
# write
   load r0, 0
   call_builtin print_int
# write
   string_const r0, " , Result:"
   call_builtin print_string
# write
   load r0, 1
   call_builtin print_int
# write
   string_const r0, "\n"
   call_builtin print_string
# epilogue
   pop_stack_frame 2
   return